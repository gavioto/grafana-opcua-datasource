version: 2.1

parameters:
  ssh-fingerprint:
    type: string
    default: ${GITHUB_SSH_FINGERPRINT}

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master
  - &filter-only-release
    branches:
      only: /^v[1-9]*[0-9]+\.[1-9]*[0-9]+\.x$/

workflows:
  plugin_workflow:
    jobs:
      - build
      - build_backend_linux
      - build_backend_windows
      - build_backend_osx
      - package:
          requires:
            - build
            - build_backend_linux
            - build_backend_windows
            - build_backend_osx
      - report:
          requires:
            - package
      - approve_release:
          type: approval
          requires:
            - report
          filters: *filter-only-release
      - publish_github_release:
          requires:
            - approve_release
          filters: *filter-only-release

executors:
  default_exec: # declares a reusable executor
    docker:
      - image: srclosson/grafana-plugin-ci-alpine:latest
  e2e_exec:
    docker:
      - image: srclosson/grafana-plugin-ci-e2e:latest
  dotnet_exec:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1

jobs:
  build:
    executor: default_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            mkdir ci
            [ -f ~/project/node_modules/.bin/grafana-toolkit ] || yarn install --frozen-lockfile
      - save_cache:
          name: save node_modules
          paths:
            - ~/project/node_modules
          key: build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - save_cache:
          name: save cypress cache
          paths:
            - ~/.cache/Cypress
          key: cypress-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build and test frontend
          command: ./node_modules/.bin/grafana-toolkit plugin:ci-build

  build_backend_linux:
    executor: dotnet_exec
    steps:
      - checkout
      - run:
          name: Build backend (Linux)
          command: |
            [ ! -d "ci/jobs/build_backend/linux" ] && mkdir -pv ci/jobs/build_backend/linux
            dotnet publish ./pkg/dotnet/plugin-dotnet/.linux.build.csproj -r linux-x64 -o ci/jobs/build_backend/linux --self-contained true
      - persist_to_workspace:
          root: .
          paths:
          - ci/jobs/build_backend/linux
      - store_artifacts:
          path: ci
    
  build_backend_osx:
    executor: dotnet_exec
    steps:
      - checkout
      - run:
          name: Build backend (OSX)
          command: |
            [ ! -d "ci/jobs/build_backend/osx" ] && mkdir -pv ci/jobs/build_backend/osx
            dotnet publish ./pkg/dotnet/plugin-dotnet/.osx.build.csproj -r osx-x64 -o ci/jobs/build_backend/osx --self-contained true
      - persist_to_workspace:
          root: .
          paths:
          - ci/jobs/build_backend/osx
      - store_artifacts:
          path: ci

  build_backend_windows:
    executor: dotnet_exec
    steps:
      - checkout
      - run:
          name: Build backend (Windows)
          command: |
            [ ! -d "ci/jobs/build_backend/win" ] && mkdir -pv ci/jobs/build_backend/win
            dotnet publish ./pkg/dotnet/plugin-dotnet/.win.build.csproj -r win-x64 -o ci/jobs/build_backend/win --self-contained true
      - persist_to_workspace:
          root: .
          paths:
          - ci/jobs/build_backend/win
      - store_artifacts:
          path: ci
  
  package:
    executor: default_exec
    steps:
      - checkout
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Move results to ci folder
          command: ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      - run:
          name: Package distribution
          command: |
            #
            # ci-package will create the zip file
            #
            PLUGIN_NAME=`cat ci/dist/plugin.json|jq '.id'| sed s/\"//g`
            VERSION=`cat ci/dist/plugin.json|jq '.info.version'| sed s/\"//g`
            echo "Plugin Name: ${PLUGIN_NAME}"
            echo "Plugin Version: ${VERSION}"
            #
            # Building separate linux and windows zip files
            #
            # 1. rename to linux package
            #
            mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip \
              ci/packages/${PLUGIN_NAME}-${VERSION}.linux_amd64.zip
            mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip.sha1 \
              ci/packages/${PLUGIN_NAME}-${VERSION}.linux_amd64.zip.sha1
            #
            # 2. update info.json with new zip file name
            #
            sed -i 's/zip/linux_amd64\.zip/g' ci/packages/info.json
            #
            # 3. move into linux subdir
            #
            mkdir -p temp_ci/packages/linux
            cp -p ci/packages/info.json temp_ci/packages/linux
            cp -p ci/packages/info.json temp_ci/packages/linux/info-linux.json
            mv ci/packages/${PLUGIN_NAME}* temp_ci/packages/linux
            #
            # now create the windows package
            #
            # 4. re-run ci-package to create the windows-only zip
            #
            mv ci/jobs/build_backend/dist/gpx_newrelic_linux_amd64 .
            mv gpx_newrelic_windows_amd64.exe ci/jobs/build_backend/dist
            /usr/local/bin/grafana-toolkit plugin:ci-package
            #
            # 5. rename zip
            #
            mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip \
              ci/packages/${PLUGIN_NAME}-${VERSION}.windows_amd64.zip
            mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip.sha1 \
              ci/packages/${PLUGIN_NAME}-${VERSION}.windows_amd64.zip.sha1
            #
            # update info.json with new zip file name
            #
            sed -i 's/zip/windows_amd64\.zip/g' ci/packages/info.json
            #
            # 6. move into windows subdir
            #
            mkdir ci/packages/windows
            # report needs info.json, so keep a copy here
            cp ci/packages/info.json ci/packages/windows
            cp ci/packages/info.json ci/packages/windows/info-windows.json
            mv ci/packages/${PLUGIN_NAME}* ci/packages/windows
            #
            # 7. put the linux build back into place (it gets removed when running plugin:ci-package the second time)
            #
            mv temp_ci/packages/linux ci/packages
            # DONE
            ls -lR ci/packages
            # put the executables back for GHR to use
            mv gpx_newrelic_linux_amd64 ci/jobs/build_backend/dist
            mv gpx_newrelic_darwin_amd64 ci/jobs/build_backend/dist
      - persist_to_workspace:
          root: .
          paths:
            - ci/dist
            - ci/jobs/package
            - ci/grafana-test-env
            - ci/packages
            - instantclient
      - store_artifacts:
          path: ci/packages
            ./node_modules/.bin/grafana-toolkit plugin:ci-package

  report:
    executor: default_exec
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Toolkit report
          command: |
            ./node_modules/.bin/grafana-toolkit plugin:ci-report
      - store_artifacts:
          path: ci

  publish_github_release:
    executor: default_exec
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
          - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Publish Release on GitHub"
          command: |
            ## I'm really hacky, but don't remove me right now. 
            [ -n "${TEMP_TOOLKIT_HACK}" ] && cp /usr/local/bin/githubRelease.js node_modules/@grafana/toolkit/src/cli/utils/githubRelease.js
            ./node_modules/.bin/grafana-toolkit plugin:github-publish

